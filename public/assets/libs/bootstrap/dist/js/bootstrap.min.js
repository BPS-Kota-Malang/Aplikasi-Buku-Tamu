var tern = require("./tern"),
    fs = require("fs"),
    path = require("path"),
    url = require("url"),
    glob = require("glob"),
    minimatch = require("minimatch"),
    resolveFrom = require("resolve-from"),
    projectFileName = ".tern-project",
    portFileName = ".tern-port";
function findProjectDir() {
    for (var e = process.cwd(); ; ) {
        try {
            if (fs.statSync(path.resolve(e, projectFileName)).isFile()) return e;
        } catch (e) {}
        var r = path.dirname(e);
        if (r == e) return null;
        e = r;
    }
}
var defaultConfig = { libs: [], loadEagerly: !1, plugins: { doc_comment: !0 }, ecmaScript: !0, ecmaVersion: 9, dependencyBudget: tern.defaultOptions.dependencyBudget },
    homeDir = process.env.HOME || process.env.USERPROFILE;
function readJSON(r) {
    var e = fs.readFileSync(r, "utf8");
    try {
        return JSON.parse(e);
    } catch (e) {
        console.error("Bad JSON in " + r + ": " + e.message), process.exit(1);
    }
}
function readProjectFile(e) {
    var r,
        i = readJSON(e);
    for (var n in defaultConfig)
        if (i.hasOwnProperty(n)) {
            if ("plugins" == n) for (r in defaultConfig.plugins) Object.prototype.hasOwnProperty.call(i.plugins, r) || (i.plugins[r] = defaultConfig.plugins[r]);
        } else i[n] = defaultConfig[n];
    return i;
}
function findFile(e, r, i, n) {
    var t = path.resolve(r, e);
    if (!n.disableLoadingLocal && fs.existsSync(t)) return t;
    var a = path.resolve(i, e);
    return fs.existsSync(a) ? a : void 0;
}
homeDir && fs.existsSync(path.resolve(homeDir, ".tern-config")) && (defaultConfig = readProjectFile(path.resolve(homeDir, ".tern-config")));
var distDir = path.resolve(__dirname, "..");
function findDefs(e, r, i) {
    var n = [],
        t = r.libs.slice();
    r.ecmaScript && -1 == t.indexOf("ecmascript") && t.unshift("ecmascript");
    for (var a = 0; a < t.length; ++a) {
        var o = t[a];
        /\.json$/.test(o) || (o += ".json");
        var s = findFile(o, e, path.resolve(distDir, "defs"), i) || resolveFrom(e, "tern-" + t[a]);
        if (!s)
            try {
                s = require.resolve("tern-" + t[a]);
            } catch (e) {
                process.stderr.write("Failed to find library " + t[a] + ".\n");
                continue;
            }
        s && n.push(readJSON(s));
    }
    return n;
}
function loadPlugins(e, r, i) {
    var n = r.plugins;
    i = {};
    for (var t in n) {
        var a = n[t];
        if (a) {
            var o = findFile(t + ".js", e, path.resolve(distDir, "plugin"), i) || resolveFrom(e, "tern-" + t);
            if (!o)
                try {
                    o = require.resolve("tern-" + t);
                } catch (e) {
                    process.stderr.write("Failed to find plugin " + t + ".\n");
                    continue;
                }
            var s = require(o);
            s.hasOwnProperty("initialize") && s.initialize(distDir), (i[path.basename(t)] = a);
        }
    }
    return i;
}
function startServer(i, n, e) {
    var r = {
        getFile: function (r, e) {
            n.dontLoad &&
            n.dontLoad.some(function (e) {
                return minimatch(r, e);
            })
                ? e(null, "")
                : fs.readFile(path.resolve(i, r), "utf8", e);
        },
        normalizeFilename: function (e) {
            var r = path.resolve(i, e);
            try {
                r = fs.realPathSync(path.resolve(i, e), !0);
            } catch (e) {}
            return path.relative(i, r);
        },
        async: !0,
        defs: findDefs(i, n, e),
        plugins: loadPlugins(i, n, e),
        projectDir: i,
        ecmaVersion: n.ecmaVersion,
        dependencyBudget: n.dependencyBudget,
    };
    if (e.tern) for (var t in e.tern) e.tern.hasOwnProperty(t) && (r[t] = e.tern[t]);
    var a = new tern.Server(r);
    return (
        n.loadEagerly &&
            n.loadEagerly.forEach(function (e) {
                glob.sync(e, { cwd: i }).forEach(function (e) {
                    a.addFile(e);
                });
            }),
        a.flush(function () {}),
        a
    );
}
module.exports = function (e) {
    var r = e.projectDir;
    if ((r = r || findProjectDir())) var i = readProjectFile(path.resolve(r, projectFileName));
    else {
        r = process.cwd();
        i = defaultConfig;
    }
    return startServer(r, i, e);
};
